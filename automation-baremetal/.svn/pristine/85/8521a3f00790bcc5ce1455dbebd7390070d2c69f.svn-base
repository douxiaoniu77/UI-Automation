'''
Created on Jan 3, 2019

@author: umartine

===============================================================================
                                     Change log
===============================================================================

    Date         GUID        Comment
    -----------------------------------------------------------------------
    2019-01-03   umartine    Initial Creation

'''

import oci_cli_qa.lib.operations.identity as identity
from oci_cli_qa.lib.logger import LOG

API_KEY_PUB_PATH = "config/oci_api_key_public.pem"
API_KEY_PUB = ""
with open(API_KEY_PUB_PATH, 'r') as fd:
    API_KEY_PUB = fd.read().replace('\n', '')


'''
-------------------------------------------------------------------------------
                            Set Configurations
-------------------------------------------------------------------------------
'''

# TC-1, TC-2, TC-3, TC-7, TC-8, TC-9
def set_single_compartment_prereqs(config):
    LOG.info("[START] Create single compartment")
    compartment_name = "new_compartment"
    compartment_desc = "compartment description"
    compartment = identity.get_compartment(config, compartment_name)
    if compartment != None:
        LOG.info("Compartment Exists, configuration not needed")
    else:
        compartment = identity.create_compartment(config, compartment_name, compartment_desc, config["tenancy"]).data
    LOG.info("[END] Create single compartment")
    return compartment.id


# TC-4
def set_restricted_compartment_prereqs(config):
    LOG.info("[START] Create restricted compartment")
    compartment_name = "restricted_compartment"
    compartment_desc = "compartment description"
    if identity.get_compartment(config, compartment_name) != None:
        LOG.info("Compartment Exists, configuration not needed")
        return
    identity.create_compartment(config, compartment_name, compartment_desc, config["tenancy"])

    user_name_1 = "user_1"
    identity.create_user(config, config["tenancy"], user_name_1, "user description")
    identity.upload_api_key(config, user_name_1, API_KEY_PUB)

    user_name_2 = "user_2"
    identity.create_user(config, config["tenancy"], user_name_2, "user description")
    identity.upload_api_key(config, user_name_2, API_KEY_PUB)

    group_name = "group_1"
    identity.create_group(config, group_name, "group 1 description")
    identity.add_user(config, group_name, user_name_1)

    policy_name = "policy_1"
    statements = ["Allow group {0} to manage all-resources in compartment {1}".format(group_name, compartment_name)]
    identity.create_policy(config, config["tenancy"], policy_name, statements, "policy description")
    LOG.info("[END] Create restricted compartment")


# TC-5
def set_double_compartment_prereqs(config):
    LOG.info("[START] Create double compartment")
    compartment_name_1 = "new_compartment_1"
    compartment_name_2 = "new_compartment_2"
    compartment_desc = "compartment description"

    if identity.get_compartment(config, compartment_name_1) != None:
        LOG.info("Compartment Exists, configuration not needed")
        return

    identity.create_compartment(config, compartment_name_1, compartment_desc, config["tenancy"])
    identity.create_compartment(config, compartment_name_2, compartment_desc, config["tenancy"])
    LOG.info("[END] Create double compartment")


# TC-6
def set_children_compartment_prereqs(config):
    LOG.info("[START] Create children compartment")
    compartment_name_parent = "new_compartment_parent"
    compartment_name_child = "new_compartment_child"
    compartment_desc = "compartment description"

    if identity.get_compartment(config, compartment_name_child) != None:
        LOG.info("Compartment Exists, configuration not needed")
        return

    identity.create_compartment(config, compartment_name_parent, compartment_desc, config["tenancy"])
    compartment_parent = identity.get_compartment(config, compartment_name_parent)

    identity.create_compartment(config, compartment_name_child, compartment_desc, compartment_parent.id)
    LOG.info("[END] Create children compartment")

